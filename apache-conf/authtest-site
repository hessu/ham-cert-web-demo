
###############################################################
# authtest
#Listen 10.0.0.10:443

<VirtualHost 10.0.0.10:443>
	ServerName authtest
	ServerAdmin authtest@example.com
	
	#LogLevel debug
	#ErrorLog /logs/apache/authtest.error.log
	#CustomLog /logs/apache/authtest.access.log combined
	
	DirectoryIndex index.php
	
	DocumentRoot /data/www/authtest/html
	
	RewriteEngine On
	
	<Directory /data/www/authtest/html>
	Options None
	AllowOverride None
	order allow,deny
	allow from all
	</Directory>
	
	#   SSL Engine Switch:
	SSLEngine on

	# You'll need to get an SSL certificate for the server from a CA
	# trusted by the web browsers. startssl.com gives them out for
	# free, use that if in doubt. Only the SSLCACertificateFile
	# contents are in any way specific to the amateur radio application
	# - it defines which CA roots (LoTW etc) we trust to do ham
	# license validation.
	
	#   If both key and certificate are stored in the same file, only the
	#   SSLCertificateFile directive is needed.
	SSLCertificateFile    /etc/apache2/cert/authtest.crt
	SSLCertificateKeyFile /etc/apache2/cert/authtest.key

	#   Server Certificate Chain:
	#   Point SSLCertificateChainFile at a file containing the
	#   concatenation of PEM encoded CA certificates which form the
	#   certificate chain for the server certificate. Alternatively
	#   the referenced file can be the same as SSLCertificateFile
	#   when the CA certificates are directly appended to the server
	#   certificate for convinience.
	SSLCertificateChainFile /etc/apache2/cert/authtest.crt

	#   Certificate Authority (CA):
	#
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#
	#   This shall be the LoTW root CA PEM file + other trusted roots
	SSLCACertificateFile /etc/apache2/cert/authtest-trusted-ca.pem

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCARevocationPath /etc/apache2/ssl.crl/
	#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

	#   Client Authentication (Type):
	#   Client certificate verification type and depth.  Types are
	#   none, optional, require and optional_no_ca.  Depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	SSLVerifyClient optional
	SSLVerifyDepth  4

	<FilesMatch "\.(php)$">
		SSLOptions +StdEnvVars
	</FilesMatch>

	#   SSL Protocol Adjustments:
	#   The safe and default but still SSL/TLS standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. When you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#     This forces an unclean shutdown when the connection is closed, i.e. no
	#     SSL close notify alert is send or allowed to received.  This violates
	#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
	#     this when you receive I/O errors because of the standard approach where
	#     mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#     This forces an accurate shutdown when the connection is closed, i.e. a
	#     SSL close notify alert is send and mod_ssl waits for the close notify
	#     alert of the client. This is 100% SSL/TLS standard compliant, but in
	#     practice often causes hanging connections with brain-dead browsers. Use
	#     this only for browsers where you know that their SSL implementation
	#     works correctly.
	#   Notice: Most problems of broken clients are also related to the HTTP
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
	#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
	#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
	BrowserMatch "MSIE [2-6]" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0
	# MSIE 7 and newer should be able to use keepalive
	BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown

</VirtualHost>
